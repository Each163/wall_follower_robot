<?xml version="1.0" ?>

<!--
  Gazebo ROS differential drive plugin 

  Try sending commands:

    ros2 topic pub /demo/cmd_vel geometry_msgs/Twist '{linear: {x: 0.05}}' -1

    ros2 topic pub /demo/cmd_vel geometry_msgs/Twist '{angular: {z: 0.1}}' -1

  Try listening to odometry:

    ros2 topic echo /demo/odom

  Try listening to TF:

    ros2 run tf2_ros tf2_echo odom base_link

    ros2 run tf2_ros tf2_echo base_link right_wheel

    ros2 run tf2_ros tf2_echo base_link left_wheel
-->

<robot name="two_wheeled_robot_mine" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- If true, physics engine will ignore -->
    <gazebo>
        <static>false</static>
    </gazebo>

    <!-- ROBOT CONSTANT -->
    <xacro:property name="base_width" value="0.5"/>
    <xacro:property name="base_length" value="0.7"/>
    <xacro:property name="base_height" value="0.2"/>

    <xacro:property name="wheel_radius" value="0.15"/>
    <xacro:property name="wheel_width" value="0.05"/>

    <xacro:property name="wheel_ygap" value="0.05"/>
    <!-- <xacro:property name="wheel_xoff" value="0.2"/> -->
    <xacro:property name="wheel_xoff" value="0.2"/>
    <xacro:property name="wheel_zoff" value="-0.2"/>

    <xacro:property name="front_sphere_radius" value="${(wheel_radius + wheel_zoff - base_height/2 + 0.2) / 2}"/>

    <!-- inertial property macros -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/> 
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (3*r*r + h*h)}" iyz="0.0" izz="${(m/2) * (r*r)}"/> 
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${((2/5) * m) * (r * r)}" ixy="0.0" ixz="0.0" iyy="${((2/5) * m) * (r * r)}" iyz="0.0" izz="${((2/5) * m) * (r * r)}"/> 
        </inertial>
    </xacro:macro>

    <!-- ROBOT BASE FOORPRINT -->
    <!-- Define the center of the main robot chassis projected on the ground-->
    <!-- <link name="base_footprint"/>

    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link" />
        <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
      </joint> -->

    <!-- ROBOT BASE -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0.2" rpy="0 0 0"/>
            <geometry>
                <box size="${base_length-0.2} ${base_width} ${base_height}"/>
            </geometry>
            <material name="Red">
                <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0.2" rpy="0 0 0"/>
            <geometry>
                <box size="${base_length-0.2} ${base_width} ${base_height}"/>
            </geometry>
        </collision>

        <xacro:box_inertia m="0.5" w="${base_width}" d="${base_length}" h="${base_height}"/>
    </link>

    <gazebo reference="base_link">
        <material>Gazebo/Red</material>
    </gazebo>

    <!-- ROBOT WHEELS -->
    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="White">
                    <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="0.1" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_joint" type="revolute">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="${x_reflect * wheel_xoff} ${y_reflect * (base_width/2 + wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
            <limit upper="${pi}" lower="${-pi}" effort="30" velocity="5.0"/>
            <axis xyz="0 1 0"/>
        </joint>

        <gazebo reference="${prefix}_link">
            <material>Gazebo/White</material>
        </gazebo>
        
    </xacro:macro>

    <xacro:wheel prefix="drivewheel_l" x_reflect="-1" y_reflect="-1"/>
    <xacro:wheel prefix="drivewheel_r" x_reflect="-1" y_reflect="1"/>

    <link name="front_sphere">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <!-- <sphere radius="${front_sphere_radius}"/> -->
                <sphere radius="0.025"/>
            </geometry>
            <material name="White">
                <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${front_sphere_radius}"/>
            </geometry>
        </collision>
        <xacro:sphere_inertia m="0.1" r="${front_sphere_radius}"/>
    </link>

    <joint name="front_sphere_joint" type="fixed">
        <parent link="base_link"/>
        <child link="front_sphere"/>
        <origin xyz="0.225 0 0.075" rpy="0 0 0"/>
    </joint>

    <!-- IMU SETUP -->
    <link name="imu_link"/>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0.1 0 0.1" rpy="0 0 0"/>
    </joint>

    <!-- LIDAR SETUP -->
    <link name="lidar_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.0508" length="0.05"/>
            </geometry>
            <material name="Black">
                <color rgba="${0/255} ${0/255} ${0/255} 1"/>
            </material>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.0508" length="0.05"/>
            </geometry>
        </collision>

        <inertial>
            <mass value="0.1"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
        </inertial>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_link"/>
        <origin xyz="${base_length/2 - 0.05} 0 ${base_height+0.10}" rpy="0 0 0"/>
    </joint>

    <gazebo reference="lidar_link">
        <sensor name="laser" type="ray">
            <ray>
                <scan>
                    <horizontal>
                        <samples>181</samples>
                        <resolution>1</resolution>
                        <min_angle>${-pi/2}</min_angle>
                        <max_angle>${pi/2}</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.08</min>
                    <max>10</max>
                    <resolution>0.05</resolution>
                </range>
            </ray>
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>true</visualize>

            <plugin name="laser" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <namespace>/demo</namespace>
                    <argument>--ros-args --remap ~/out:=scan</argument>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <!-- <updateRate>50</updateRate>
                <topicName>laser_frame</topicName> -->
            </plugin>
        </sensor>
    </gazebo>

    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <ros>
                <namespace>/demo</namespace>
                <remapping>cmd_vel:=cmd_vel</remapping>
                <remapping>odom:=odom</remapping>
            </ros>

            <updata_rate>30</updata_rate>

            <!-- wheels -->
            <left_joint>drivewheel_l_joint</left_joint>
            <right_joint>drivewheel_r_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>${base_width + wheel_radius}</wheel_separation>
            <wheel_diameter>${2*wheel_radius}</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>3</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
        </plugin> 
    </gazebo>
   

</robot> 